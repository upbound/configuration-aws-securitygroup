# code: language=yaml
# yaml-language-server: $schema=../../.up/json/models/index.schema.json

{{ $xr := getCompositeResource . }}
{{ $spec := $xr.spec }}

apiVersion: ec2.aws.upbound.io/v1beta1
kind: SecurityGroup
metadata:
  name: {{ $xr.metadata.name }}
  annotations:
    {{ setResourceNameAnnotation "securitygroup" }}
spec:
  deletionPolicy: {{ $spec.parameters.deletionPolicy }}
  managementPolicies: ["*"]
  forProvider:
    name: {{ $xr.metadata.name }}
    region: {{ $spec.parameters.region }}
    vpcIdSelector:
      matchLabels:
        networks.aws.platform.upbound.io/network-id: {{ $spec.parameters.id }}
  providerConfigRef:
    name: {{ $spec.parameters.providerConfigName }}

{{- range $i, $rule := $spec.parameters.rules }}
  {{- $cidrBlocks := $rule.cidrBlocks | default (list "") }}
  {{- range $j, $cidrBlock := $cidrBlocks }}
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: SecurityGroup{{ title $rule.type }}Rule
metadata:
  annotations:
    {{ setResourceNameAnnotation (printf "sgrule-%d-%s" $i ($cidrBlock | replace "." "-" | replace "/" "-")) }}
spec:
  deletionPolicy: {{ $spec.parameters.deletionPolicy }}
  managementPolicies: ["*"]
  forProvider:
    {{- if $cidrBlock }}
    cidrIpv4: {{ $cidrBlock }}
    {{- end }}
    region: {{ $spec.parameters.region }}
    securityGroupIdSelector:
      matchControllerRef: true
    {{- if $rule.fromPort }}
    fromPort: {{ $rule.fromPort }}
    {{- end }}
    {{- if $rule.toPort }}
    toPort: {{ $rule.toPort }}
    {{- end }}
    description: {{ $rule.description }}
    ipProtocol: '{{ $rule.protocol }}'
    {{- if $rule.isSelf }}
    referencedSecurityGroupIdSelector:
      matchControllerRef: true
    {{- end }}
    {{- if $rule.sourceSecurityGroupName }}
    referencedSecurityGroupIdRef:
      name: {{ $rule.sourceSecurityGroupName }}
    {{- end }}
  providerConfigRef:
    name: {{ $spec.parameters.providerConfigName }}
  {{- end }}
{{- end }}
